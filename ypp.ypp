%{
#include "hpp.hpp"
%}
%defines %union { Sym*o; }			/* universal bI abstract symbolic type	*/
%token <o> SYM STR NUM DIR DOC		/* symbol 'string' number .directive	*/
%token <o> LP RP LQ RQ LC RC LV RV	/* () [] {} <>							*/
%token <o> EQ AT TILD COLON			/* = @ ~ :								*/
%token <o> DOT COMMA PERC			/* . , %								*/
%token <o> ADD SUB MUL DIV POW		/* + - * / ^							*/
%token <o> INS DEL					/* += insert -= delete					*/
%type <o> ex scalar list lambda		/* expression scalar [list] {lam:bda}	*/
%type <o> vector cons op bracket	/* <vector> co,ns operator bracket		*/

%left INS
%left DOC
%left EQ
%left ADD SUB
%left MUL DIV
%left POW
%right AT
%right COMMA
%left PFX
%left TILD
%left PERC
%left COLON
%left DOT
%%							/* REPL with full pasre/eval logging */
REPL : | REPL ex			{ cout << $2->dump();
				 			cout << "\n------------------";
				 			cout << $2->eval()->dump();
				 			cout << "\n==================\n"; } ;
ex		: scalar | DIR
		| ex DOC			{ $$=$1; $$->doc=$2->val; }
		| LP ex RP			{ $$=$2; }
		| LQ list RQ		{ $$=$2; }
		| LC lambda RC		{ $$=$2; }
		| LV vector RV		{ $$=$2; }
		| TILD ex			{ $$=$1; $$->push($2); }
		| TILD op			{ $$=$1; $$->push($2); }
		| cons
		| ADD ex %prec PFX	{ $$=$2->pfxadd(); }
		| SUB ex %prec PFX	{ $$=$2->pfxsub(); }
		| ex EQ ex			{ $$=$2; $$->push($1); $$->push($3); }
		| ex AT ex			{ $$=$2; $$->push($1); $$->push($3); }
		| ex COLON ex		{ $$=$2; $$->push($1); $$->push($3); }
		| ex DOT ex			{ $$=$2; $$->push($1); $$->push($3); }
		| ex PERC ex		{ $$=$2; $$->push($1); $$->push($3); }
		| ex ADD ex			{ $$=$2; $$->push($1); $$->push($3); }
		| ex SUB ex			{ $$=$2; $$->push($1); $$->push($3); }
		| ex MUL ex			{ $$=$2; $$->push($1); $$->push($3); }
		| ex DIV ex			{ $$=$2; $$->push($1); $$->push($3); }
		| ex POW ex			{ $$=$2; $$->push($1); $$->push($3); }
		| ex INS ex			{ $$=$2; $$->push($1); $$->push($3); }
		| ex DEL ex			{ $$=$2; $$->push($1); $$->push($3); }
;
op		: bracket |EQ |AT |TILD |COLON |DOT |COMMA |ADD |SUB |MUL |DIV |POW ;
bracket	: LP |RP |LQ |RQ |LC |RC |LV |RV ;
scalar	: SYM | STR | NUM ;

cons	: ex COMMA ex		{ $$=new Cons($1,$3); } ;
list	:					{ $$=new List(); }
		| list ex			{ $$=$1; $$->push($2); }
;
lambda	:					{ $$=new Lambda(); }
		| lambda SYM COLON	{ $$=$1; $$->par($2); }
		| lambda ex			{ $$=$1; $$->push($2); }
;
vector	:					{ $$=new Vector(); }
		| vector ex			{ $$=$1; $$->push($2); }
;
%%