# bI test suite

# line comment from # till end of line

.inc lude.test

scalars = [ # \ complex test: scalars, composites and var/assign
	symbol 'string'
	
	cInts = -01 , 00 , +002 ,N	# int: integer / co,ns = lisp dotted pair /
	vNums = < -01.20 +3e-4 >	# num: floating point / <vec tor> /
	lMachine = [				# / [list] / 
		0x12AF			# hex: machine int
		0b1101			# bin: bit string
	]
	specials = [		# special symbols
		T # true 
		F # false 
		N # nil 
		D # default
		E # error
	]
] # /
scalars cInts vNums lMachine specials	# check assigned global variables

# fileio: filesystem interface extension

next = dir@MODULE		" create directory for next bI generation "
make = next+'Makefile'	# check file create on +'string'

## check ~ quoting prefix works

doc = next+dir@~doc 	# check file create on +symbol

## nested assignments and user defined lambda/apply

pp = { P: P+'pp' }	# add 'pp' string
xx = { X: pp@X+'.'+pp@X }	# double ext.ext

# lexical program skeleton = lex skeleton = skelex

skelex = [
	src = next+file@'src.src'	# source file
	log = next+file@'log.log'	# engine batch run log
	core = [					# bI interpreter core sources
		ypp = next+xx@y		# parser
		lpp = next+xx@l		# lexer
		hpp = next+xx@h		# headers
		cpp = next+xx@c		# c++ core
		make				# makefile
	]	
	doc							# manual
]

inchpp = '#include "hpp.hpp"\n'
ylhdr = { X: '%{\n'+inchpp+X+'%}\n' }

ypp += ylhdr@''
lpp += ylhdr@''

string = class:~string
string . h
