%{
#include "hpp.hpp"
string LexString;										// string parse buffer
void incLude(Sym*inc) {									// .include processing
	if (!(yyin = fopen((inc->val).c_str(),"r"))) yyerror("");
	yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE));
}
%}
%option noyywrap
%option yylineno
%x lexstring
S [\-\+]?
N [0-9]+
%%
#[^\n]*				{}					/* == line comment == */

														/* == .directives == */
^\.end				{yyterminate();}					/* .end */
^\.inc[ \t]+[^\n]+	{incLude(new Directive(yytext));}	/* .include */
^\.[a-z]+[^\n]*		TOC(Directive,DIR)					/* .directive */
										
'					{BEGIN(lexstring); LexString="";}
<lexstring>'		{BEGIN(INITIAL); yylval.o=new Str(LexString); return STR;}
<lexstring>\\t		{LexString+='\t';}
<lexstring>\\n		{LexString+='\n';}
<lexstring>\n		{LexString+=yytext[0];}
<lexstring>.		{LexString+=yytext[0];}

										/* == numbers == */
{N}\.{N}			TOC(Num,NUM)		/* floating point */
{N}[eE]{S}{N}		TOC(Num,NUM)		/* exponential */
{N}					TOC(Int,NUM)		/* integer */
0x[0-9A-F]+			TOC(Hex,NUM)		/* machine hex */
0b[01]+				TOC(Bin,NUM)		/* bin string */

[a-zA-Z0-9_]+		TOC(Sym,SYM)		/* == symbol == */

\(					TOC(Op,LP)			/* == brackets == */
\)					TOC(Op,RP)
\[					TOC(Op,LQ)			/* [list] */
\]					TOC(Op,RQ)
\{					TOC(Op,LC)			/* {lambda} */
\}					TOC(Op,RC)
\<					TOC(Op,LV)			/* <vector> */
\>					TOC(Op,RV)

										/* == operators == */
\=					TOC(Op,EQ)
\@					TOC(Op,AT)
\~					TOC(Op,TILD)
\:					TOC(Op,COLON)
\.					TOC(Op,DOT)
\,					TOC(Op,COMMA)

\+					TOC(Op,ADD)
\-					TOC(Op,SUB)
\*					TOC(Op,MUL)
\/					TOC(Op,DIV)
\^					TOC(Op,POW)

[ \t\r\n]+			{}					/* == drop spaces == */

<<EOF>>			{ yypop_buffer_state();				/* end of .inluded file */
				if (!YY_CURRENT_BUFFER)
					yyterminate();}
%%